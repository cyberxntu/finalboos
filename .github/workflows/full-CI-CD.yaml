name: Full CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  IMAGE_TAG: x7m7s7/devops:latest

jobs:

  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: pip install requests bandit detect-secrets jq

      - name: Install Trivy (latest)
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Run SAST
        run: python .github/workflows/scripts/sast.py app.py /templates

      - name: Show SAST results
        run: |
          if [ -f sast_results.json ]; then cat sast_results.json; else echo "No SAST results file found."; fi

      - name: Run SCA
        run: python .github/workflows/scripts/sca.py requirements.txt

      - name: Show SCA results
        run: |
          if [ -f sca_results.json ]; then cat sca_results.json; else echo "No SCA results file found."; fi

      - name: Run Secret Scan
        run: python .github/workflows/scripts/secret_scanner.py

      - name: Show Secret Scan results
        run: |
          if [ -f secrets_found.json ]; then cat secrets_found.json; else echo "No secrets_found results file found."; fi

      - name: Run Code Style
        run: python .github/workflows/scripts/code_style.py

      - name: Show Code Style results
        run: |
          if [ -f style_results.json ]; then cat style_results.json; else echo "No style results file found."; fi

      - name: Merge all results
        run: |
          echo "{" > full_report.json
          echo '"sast":' >> full_report.json && (cat sast_results.json || echo '[]') >> full_report.json
          echo ',' >> full_report.json
          echo '"sca":' >> full_report.json && (cat sca_results.json || echo '[]') >> full_report.json
          echo ',' >> full_report.json
          echo '"secrets":' >> full_report.json && (cat secrets_found.json || echo '[]') >> full_report.json
          echo ',' >> full_report.json
          echo '"style":' >> full_report.json && (cat style_results.json || echo '[]') >> full_report.json
          echo "}" >> full_report.json

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            sast_results.json
            sca_results.json
            secrets_found.json
            style_results.json
            full_report.json

      - name: Fail if real security issues found
        run: |
          fail=0
          for file in sast_results.json sca_results.json secrets_found.json style_results.json; do
            if [ -s "$file" ]; then
              count=$(jq 'if type=="array" then length elif type=="object" and has("results") then .results | length else 0 end' "$file")
              if [ "$count" -gt 0 ]; then
                echo "Security issues detected in $file"
                fail=1
              fi
            fi
          done
          if [ "$fail" -eq 1 ]; then
            exit 1
          fi

  build-and-push:
    needs: security-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.PASS_SECRET }}" | docker login -u "x7m7s7" --password-stdin

      - name: Build Docker Image
        run: docker build -t $IMAGE_TAG .

      - name: Push Docker Image
        run: docker push $IMAGE_TAG

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH

      - name: Deploy with Retry
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl deploy --image $IMAGE_TAG --app devops-staging --remote-only --strategy rolling

  nikto-scan:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
      - name: Install Nikto
        run: sudo apt-get update && sudo apt-get install -y nikto

      - name: Run Nikto scan on staging
        run: |
          mkdir -p nikto_reports
          nikto -h https://devops-staging.fly.dev -o nikto_reports/nikto_report.html -Format htm

      - name: Upload Nikto report
        uses: actions/upload-artifact@v4
        with:
          name: nikto-report
          path: nikto_reports/nikto_report.html

  deploy-production:
    needs: nikto-scan
    runs-on: ubuntu-latest
    steps:
      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH

      - name: Deploy to Production on Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN2 }}
        run: flyctl deploy --remote-only --app devops-production -c fly.production.toml
