name: Full CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:

  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: pip install requests bandit detect-secrets jq

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Run SAST
        run: python .github/workflows/scripts/sast.py app.py /tamplates

      - name: Run SCA
        run: python .github/workflows/scripts/sca.py requirements.txt

      - name: Run Secret Scan
        run: python .github/workflows/scripts/secret_scanner.py

      - name: Run Code Style
        run: python .github/workflows/scripts/code_style.py

      - name: Merge all results
        run: |
          echo "{" > full_report.json
          echo '"sast":' >> full_report.json && (cat sast_results.json || echo '[]') >> full_report.json
          echo ',' >> full_report.json
          echo '"sca":' >> full_report.json && (cat sca_results.json || echo '[]') >> full_report.json
          echo ',' >> full_report.json
          echo '"secrets":' >> full_report.json && (cat secrets_found.json || echo '[]') >> full_report.json
          echo ',' >> full_report.json
          echo '"style":' >> full_report.json && (cat style_results.json || echo '[]') >> full_report.json
          echo "}" >> full_report.json

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            sast_results.json
            sca_results.json
            secrets_found.json
            style_results.json
            full_report.json

  build-and-push:
    needs: security-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        run: echo "${{ secrets.PASS_SECRET }}" | docker login -u "x7m7s7" --password-stdin

      - name: Build Docker Image
        run: |
          docker build \
          --build-arg APP_ENV=staging \
          -t x7m7s7/devops:latest \
          -t x7m7s7/devops:staging-$(date +%Y%m%d) .

      - name: Push Docker Image
        run: |
          docker push x7m7s7/devops:latest
          docker push x7m7s7/devops:staging-$(date +%Y%m%d)

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH

      - name: Deploy with Retry
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          FLY_TELEMETRY_DISABLED: "1"
        run: |
          flyctl deploy --remote-only \
            --app devops-staging \
            --strategy rolling \
            --wait-timeout 600

          sleep 60
          curl -sSf https://devops-staging.fly.dev/health || exit 1

  zap-scan:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare report folder
        run: mkdir -p zap-report

      - name: Run ZAP Scan via Docker
        run: |
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run --rm \
            -v ${{ github.workspace }}/zap-report:/zap/wrk \
            --network="host" \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
              -t https://devops-staging.fly.dev \
              -J zap-report.json \
              -w zap-report.md \
              -r zap-report.html \
              -m 1

      - name: Upload ZAP Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: zap-report/*

      - name: Send ZAP Report via Gmail
        env:
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        run: python .github/workflows/scripts/send_email.py

  deploy-production:
    needs: zap-scan
    runs-on: ubuntu-latest
    steps:
      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH

      - name: Deploy to Production on Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl deploy --remote-only --app devops-production
