name: Full CI/CD with ZAP, Telegram, DigitalOcean, and Render

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/devopscheck:latest .

    - name: Push Image to DockerHub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/devopscheck:latest

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/devopscheck:latest
          docker stop devopscheck || true && docker rm devopscheck || true
          docker run -d --name devopscheck -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/devopscheck:latest

  zap-scan:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
    - name: ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: http://${{ secrets.STAGING_HOST }}:5000
        fail_action: false
        report_file: zap_report.html
        cmd_options: "-t 60"

    - name: Upload ZAP Report
      uses: actions/upload-artifact@v3
      with:
        name: zap-report
        path: zap_report.html

    - name: Send ZAP Report to Telegram
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        curl -F "chat_id=$TELEGRAM_CHAT_ID" \
             -F document=@zap_report.html \
             https://api.telegram.org/bot$TELEGRAM_TOKEN/sendDocument

  deploy-production:
    needs: zap-scan
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/devopscheck:latest
          docker stop devopscheck || true && docker rm devopscheck || true
          docker run -d --name devopscheck -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/devopscheck:latest

  deploy-digitalocean:
    needs: deploy-production
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to DigitalOcean App Platform
      uses: digitalocean/app_action@v1.1.5
      with:
        app_name: ${{ secrets.DO_APP_NAME }}
        token: ${{ secrets.DO_API_TOKEN }}
        image: ${{ secrets.DOCKER_USERNAME }}/devopscheck:latest

  deploy-render:
    needs: deploy-digitalocean
    runs-on: ubuntu-latest
    steps:
    - name: Trigger Deploy on Render
      run: |
        curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}